% conway
% Set Matrix dimensions for plot. round(rand(Rows, Columns))==1;
%   For optimal scale set Columns = int(1.5 * Rows).
M = round(rand(240, 360))==1;
useColorPick = false; % Change to true if you want to pick 9 colors
updateTime = .05;    % Update speed ( Seconds per update )

%Define Color Maps:
map2 = [0, 0, 0; 0, 1, 0];
mapR9 = [0,0,0;.125,0,0;.25,0,0;.375,0,0;.5,0,0;.625,0,0;.75,0,0;.875,0,0;1,0,0];
mapG9 = circshift(mapR9, [0,1]);
mapB9 = circshift(mapG9, [0,1]);
mapY9 = mapR9 + mapG9;
mapX9 = [0,0,0;0,0,0;.5,0,0;1,0,0;0,1,1;0,.5,.5;0,0,1;0,0,.5;1,1,0];
mapZ91 = [0,0,0; 0,0,0; 1,0,0; 1,1,0; 1,0,1; 0,1,1; 0,1,0; 1,1,1; 1,1,1];
mapZ92 = [0,0,0; 0,0,0; 0,.8,0; 1,1,0; 1,0,0; 0,0,1; 0,1,0; 1,1,1; 1,1,1];
mapZ93 = [0,0,0; 0,0,0; 0,0,1; 1,1,0; 1,0,0; 0,0.8,0; 0,1,0; 1,1,1; 1,1,1];

if useColorPick
    mapCpick = colorPick(9)
    colormap(mapCpick);  % Use colorMap generated by colorPick
else
    colormap(mapZ93);  % choose pre-defined colormap
end    

set(gcf, 'Position', get(0, 'ScreenSize'))
set(gca, 'Units', 'normalized')
set(gca, 'Position', [0, 0, 1, 1])
set(gcf, 'Menubar', 'none')

% rotD = [-1, -1; -1, 0; -1, 1; 0, -1; 0, 1; 1, -1; 1, 0; 1, 1];
% rotD2 = [-1, 0; 0, 1; 0, 1; 1, 0; 1, 0; -1, 0; -1, 0];
rotD = [-1, -1; -1, 0; -1, 1; 0, 1; 1, -1; 1, 0; 1, 1];
[r, c] = size(M);
beginLiveCount = sum(sum(M));
beginDensity = beginLiveCount / (r * c) * 100;

m = zeros(size(M));
mSumT = zeros(size(M));
done = false;
generations = 1;

tstart = tic();
tperiod = tstart;
pause(.1)
set(gcf, 'Position', get(0, 'ScreenSize'))
drawnow

while(~done)
    mSum = circshift(M, [0,-1]);
    for rL = 1:7
        mSum = mSum + circshift(M, rotD(rL,:));
    end
    %{
    for rL = 1:8
        m(:,:,rL) = circshift(M, rotD(rL,:));
    end 
    %}
    % mSum = cast(sum(m, 3), 'uint8');
    
    % Plotting Live cells. Use colormap with 2 colors for this plot.
    % imagesc(M); 
    
    % Plotting cell colors based on number of live neighbors
    imagesc(mSum, [0,8]); 
    
    M = M & (mSum > 1) & (mSum < 4) | (~M & (mSum == 3));
    if(bitget(generations, 1))
        if(mSumT == mSum)
            done = true;
        end
        mSumT = mSum;
    end
    generations = generations + 1;

    while(toc(tperiod) < updateTime)
    end    
    tperiod = tic();
    drawnow('expose')
end
  runtime = toc(tstart);
  LiveCount = sum(sum(M));
  Density = LiveCount / (r * c) * 100;
  fprintf('  Rows: %d  Columns: %d  Cells: %d\n', r, c, r * c);
  fprintf('  Run Time = %f seconds.\n', runtime);
  fprintf('  Generations = %d\n', generations);
  fprintf('  Average generation time = %f seconds.\n', runtime / generations);
  fprintf('  Generations Per Second: %f\n', generations / runtime );
  fprintf('  Begin Live Cells: %d  Begin Matrix Density %.2f%%\n',...
    beginLiveCount, beginDensity);
  fprintf('    End Live Cells: %d  End Matrix Density %.2f%%\n\n',...
    LiveCount, Density);

